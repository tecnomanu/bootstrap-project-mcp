{
	"name": "basic-mcp",
	"description": "Basic MCP template with simple tools and minimal structure",
	"category": "basic",
	"tags": ["basic", "simple", "starter", "minimal"],
	"files": {
		"package.json": {
			"content": "{\n\t\"name\": \"{{KEBAB_CASE_NAME}}\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"{{PROJECT_NAME}} - Basic MCP server for {{DOMAIN}}\",\n\t\"type\": \"module\",\n\t\"main\": \"dist/index.js\",\n\t\"bin\": {\n\t\t\"{{KEBAB_CASE_NAME}}\": \"./dist/index.js\"\n\t},\n\t\"files\": [\"dist\", \"src\"],\n\t\"scripts\": {\n\t\t\"dev\": \"tsx watch src/index.ts\",\n\t\t\"build\": \"tsc && cp -r src/tools src/config src/utils src/services dist/ 2>/dev/null || true && npm pack\",\n\t\t\"pack\": \"npm pack\",\n\t\t\"start\": \"node dist/index.js\",\n\t\t\"install:global\": \"npm run build && npm install -g ./*.tgz\",\n\t\t\"inspector\": \"npx @modelcontextprotocol/inspector npx {{KEBAB_CASE_NAME}}\",\n\t\t\"lint\": \"eslint src --ext .ts\",\n\t\t\"test\": \"jest\"\n\t},\n\t\"dependencies\": {\n\t\t\"@modelcontextprotocol/sdk\": \"^1.17.5\",\n\t\t\"dotenv\": \"^16.3.1\",\n\t\t\"zod\": \"^3.25.76\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/jest\": \"^29.0.0\",\n\t\t\"@types/node\": \"^20.0.0\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n\t\t\"@typescript-eslint/parser\": \"^6.0.0\",\n\t\t\"eslint\": \"^8.0.0\",\n\t\t\"jest\": \"^29.0.0\",\n\t\t\"tsx\": \"^4.0.0\",\n\t\t\"typescript\": \"^5.0.0\"\n\t},\n\t\"keywords\": [\"mcp\", \"model-context-protocol\", \"claude\", \"ai\", \"typescript\", \"nodejs\", \"{{DOMAIN}}\"],\n\t\"author\": \"Generated by MCP Bootstrap\",\n\t\"license\": \"MIT\"\n}",
			"description": "NPM package configuration"
		},
		"tsconfig.json": {
			"content": "{\n\t\"compilerOptions\": {\n\t\t\"target\": \"ES2022\",\n\t\t\"module\": \"ESNext\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"esModuleInterop\": true,\n\t\t\"allowSyntheticDefaultImports\": true,\n\t\t\"strict\": true,\n\t\t\"declaration\": true,\n\t\t\"declarationMap\": true,\n\t\t\"sourceMap\": true,\n\t\t\"outDir\": \"./dist\",\n\t\t\"rootDir\": \"./src\",\n\t\t\"resolveJsonModule\": true,\n\t\t\"skipLibCheck\": true,\n\t\t\"forceConsistentCasingInFileNames\": true\n\t},\n\t\"include\": [\"src/**/*\"],\n\t\"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\"]\n}",
			"description": "TypeScript configuration"
		},
		"src/index.ts": {
			"content": "#!/usr/bin/env node\n\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { registerTools } from './tools/index.js';\nimport { logger } from './utils/logger.js';\nimport { config } from 'dotenv';\n\nconfig();\n\nasync function main() {\n\ttry {\n\t\tconst server = new McpServer({\n\t\t\tname: '{{KEBAB_CASE_NAME}}',\n\t\t\tversion: '1.0.0',\n\t\t});\n\n\t\t// Register all tools\n\t\tregisterTools(server);\n\n\t\tconst transport = new StdioServerTransport();\n\t\tawait server.connect(transport);\n\n\t\tlogger.info('🚀 {{PROJECT_NAME}} MCP Server ready for Claude Desktop');\n\t\tlogger.info('📚 Domain: {{DOMAIN}}');\n\n\t\tprocess.on('SIGINT', async () => {\n\t\t\tlogger.info('Shutting down {{PROJECT_NAME}}...');\n\t\t\tprocess.exit(0);\n\t\t});\n\t} catch (error) {\n\t\tlogger.error('ERROR: Failed to start server:', error);\n\t\tprocess.exit(1);\n\t}\n}\n\n// Handle uncaught errors\nprocess.on('uncaughtException', (error) => {\n\tlogger.error('FATAL: Uncaught exception:', error);\n\tprocess.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason) => {\n\tlogger.error('FATAL: Unhandled rejection:', reason);\n\tprocess.exit(1);\n});\n\n// Start the server\nmain().catch((error) => {\n\tlogger.error('FATAL: Failed to start:', error);\n\tprocess.exit(1);\n});",
			"description": "Main MCP server entry point"
		},
		"README.md": {
			"content": "# {{PROJECT_NAME}}\\n\\n{{PROJECT_NAME}} - Basic MCP server for {{DOMAIN}} generated with MCP Bootstrap.\\n\\n## 🚀 Installation\\n\\n```bash\\n# Install dependencies\\npnpm install\\n\\n# Build project\\npnpm run build\\n\\n# Install globally\\npnpm run install:global\\n```\\n\\n## 🔧 Claude Desktop Configuration\\n\\nAdd to your `mcp.json`:\\n\\n```json\\n{\\n\\t\"mcpServers\": {\\n\\t\\t\"{{KEBAB_CASE_NAME}}\": {\\n\\t\\t\\t\"command\": \"npx\",\\n\\t\\t\\t\"args\": [\"{{KEBAB_CASE_NAME}}\"],\\n\\t\\t\\t\"env\": {\\n\\t\\t\\t\\t\"MCP_TRANSPORT\": \"stdio\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n## 🛠️ Available Tools\\n\\n- **hello_world**: Sample greeting tool\\n- **get_info**: Get system information\\n\\n## 🧪 Development & Testing\\n\\n```bash\\n# Development mode\\npnpm run dev\\n\\n# Test with MCP Inspector\\npnpm run inspector\\n\\n# Lint code\\npnpm run lint\\n```\\n\\n## 📁 Project Structure\\n\\n```\\nsrc/\\n├── index.ts              # Main entry point\\n├── tools/                 # Tool implementations\\n│   ├── index.ts          # Tools registry\\n│   ├── hello-world.ts    # Hello World tool\\n│   ├── get-info.ts       # System info tool\\n│   └── example-elicitation.ts # Example elicitation (commented)\\n└── utils/                # Utilities\\n    ├── index.ts          # Utils exports\\n    └── logger.ts         # Logging utility\\n```\\n\\n## 📄 License\\n\\nMIT License",
			"description": "Project documentation"
		},
		"mcp.json": {
			"content": "{\\n\\t\"mcpServers\": {\\n\\t\\t\"{{KEBAB_CASE_NAME}}\": {\\n\\t\\t\\t\"command\": \"npx\",\\n\\t\\t\\t\"args\": [\"{{KEBAB_CASE_NAME}}\"],\\n\\t\\t\\t\"env\": {\\n\\t\\t\\t\\t\"MCP_TRANSPORT\": \"stdio\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}",
			"description": "Claude Desktop configuration"
		},
		"src/utils/logger.ts": {
			"content": "const logLevel = process.env.LOG_LEVEL || 'info';\n\nexport const logger = {\n\tinfo: (...args: any[]) => console.error('[{{KEBAB_CASE_NAME}}:info]', ...args),\n\terror: (...args: any[]) => console.error('[{{KEBAB_CASE_NAME}}:error]', ...args),\n\tdebug: (...args: any[]) => {\n\t\tif (logLevel === 'debug') {\n\t\t\tconsole.error('[{{KEBAB_CASE_NAME}}:debug]', ...args);\n\t\t}\n\t},\n\twarn: (...args: any[]) => console.error('[{{KEBAB_CASE_NAME}}:warn]', ...args)\n};",
			"description": "Logging utility"
		},
		"src/utils/index.ts": {
			"content": "export { logger } from './logger.js';",
			"description": "Utils exports"
		},
		"src/tools/index.ts": {
			"content": "import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { registerHelloWorldTool } from './hello-world.js';\nimport { registerGetInfoTool } from './get-info.js';\n// EXAMPLE: Commented elicitation tool for reference\n// import { registerExampleElicitationTool } from './example-elicitation.js';\n\nexport function registerTools(server: McpServer) {\n\t// Register individual tools\n\tregisterHelloWorldTool(server);\n\tregisterGetInfoTool(server);\n\t\n\t// EXAMPLE: Uncomment to enable elicitation tool (advanced)\n\t// registerExampleElicitationTool(server);\n}",
			"description": "Tools registry"
		},
		"src/tools/hello-world.ts": {
			"content": "import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { logger } from '../utils/logger.js';\n\nexport function registerHelloWorldTool(server: McpServer) {\n\tserver.registerTool(\n\t\t'hello_world',\n\t\t{\n\t\t\ttitle: 'Hello World',\n\t\t\tdescription: 'Sample greeting tool',\n\t\t\tinputSchema: {\n\t\t\t\tname: z.string().optional().default('World').describe('Name to greet')\n\t\t\t}\n\t\t},\n\t\tasync ({ name = 'World' }) => {\n\t\t\tlogger.info(`Hello world tool called with name: ${name}`);\n\t\t\t\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: [{\n\t\t\t\t\t\ttype: 'text' as const,\n\t\t\t\t\t\ttext: `Hello, ${name}! This is {{PROJECT_NAME}} working correctly.`\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Error in hello_world tool:', error);\n\t\t\t\treturn {\n\t\t\t\t\tcontent: [{\n\t\t\t\t\t\ttype: 'text' as const,\n\t\t\t\t\t\ttext: `Error: ${error instanceof Error ? error.message : String(error)}`\n\t\t\t\t\t}],\n\t\t\t\t\tisError: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t);\n}",
			"description": "Hello World tool implementation"
		},
		"src/tools/get-info.ts": {
			"content": "import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { logger } from '../utils/logger.js';\n\nexport function registerGetInfoTool(server: McpServer) {\n\tserver.registerTool(\n\t\t'get_info',\n\t\t{\n\t\t\ttitle: 'Get System Info',\n\t\t\tdescription: 'Get system information',\n\t\t\tinputSchema: {}\n\t\t},\n\t\tasync () => {\n\t\t\tlogger.info('Get info tool called');\n\t\t\t\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: [{\n\t\t\t\t\t\ttype: 'text' as const,\n\t\t\t\t\t\ttext: `📊 System Information:\\n\\n- Project: {{PROJECT_NAME}}\\n- Version: 1.0.0\\n- Node.js: ${process.version}\\n- Platform: ${process.platform}\\n- Uptime: ${process.uptime()} seconds\\n- Domain: {{DOMAIN}}`\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Error in get_info tool:', error);\n\t\t\t\treturn {\n\t\t\t\t\tcontent: [{\n\t\t\t\t\t\ttype: 'text' as const,\n\t\t\t\t\t\ttext: `Error: ${error instanceof Error ? error.message : String(error)}`\n\t\t\t\t\t}],\n\t\t\t\t\tisError: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t);\n}",
			"description": "Get Info tool implementation"
		},
		"src/tools/example-elicitation.ts": {
			"content": "// EXAMPLE ELICITATION TOOL - COMMENTED OUT FOR REFERENCE\\n// Uncomment and modify as needed. Always implement fallback patterns!\\n\\n/*\\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\\nimport { z } from 'zod';\\nimport { logger } from '../utils/logger.js';\\n\\nexport function registerExampleElicitationTool(server: McpServer) {\\n\\tserver.registerTool(\\n\\t\\t'example_elicitation',\\n\\t\\t{\\n\\t\\t\\ttitle: 'Example Elicitation Tool',\\n\\t\\t\\tdescription: 'Example tool that demonstrates elicitation with fallback',\\n\\t\\t\\tinputSchema: {\\n\\t\\t\\t\\tmode: z.string().optional().default('auto').describe('Mode: auto, manual')\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tasync ({ mode = 'auto' }) => {\\n\\t\\t\\tif (mode === 'manual') {\\n\\t\\t\\t\\treturn handleManualMode();\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Try elicitation with fallback\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tlogger.debug('Attempting elicitation...');\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tconst response = await Promise.race([\\n\\t\\t\\t\\t\\tserver.server.elicitInput({\\n\\t\\t\\t\\t\\t\\tmessage: 'Please configure options:',\\n\\t\\t\\t\\t\\t\\trequestedSchema: {\\n\\t\\t\\t\\t\\t\\t\\ttype: 'object',\\n\\t\\t\\t\\t\\t\\t\\tproperties: {\\n\\t\\t\\t\\t\\t\\t\\t\\tname: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype: 'string',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle: 'Your Name'\\n\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\tcolor: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype: 'string',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle: 'Favorite Color',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tenum: ['red', 'blue', 'green', 'yellow']\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\trequired: ['name']\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t\\t// Timeout after 2 seconds\\n\\t\\t\\t\\t\\tnew Promise((_, reject) => \\n\\t\\t\\t\\t\\t\\tsetTimeout(() => reject(new Error('Elicitation timeout')), 2000)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t]);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tconst config = (response as any).content;\\n\\t\\t\\t\\treturn handleSuccessfulElicitation(config);\\n\\t\\t\\t\\t\\n\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\tlogger.warn('Elicitation failed, using fallback:', error);\\n\\t\\t\\t\\treturn handleManualMode();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t);\\n}\\n\\nfunction handleSuccessfulElicitation(config: any) {\\n\\treturn {\\n\\t\\tcontent: [{\\n\\t\\t\\ttype: 'text' as const,\\n\\t\\t\\ttext: `✅ Configuration received via elicitation:\\\\n\\\\n- Name: ${config.name}\\\\n- Color: ${config.color || 'Not specified'}`\\n\\t\\t}]\\n\\t};\\n}\\n\\nfunction handleManualMode() {\\n\\treturn {\\n\\t\\tcontent: [{\\n\\t\\t\\ttype: 'text' as const,\\n\\t\\t\\ttext: `⚠️ Manual mode active. Elicitation not available.\\\\n\\\\nTo use this tool with parameters, call it like:\\\\n\\\\nexample_elicitation({ mode: 'manual' })`\\n\\t\\t}]\\n\\t};\\n}\\n*/",
			"description": "Example elicitation tool (commented out)"
		},
		"env.example": {
			"content": "# === MAIN CONFIGURATION ===\\n# MCP Transport\\nMCP_TRANSPORT=stdio\\n\\n# === TECHNICAL CONFIGURATION ===\\n# Logging level\\nLOG_LEVEL=info",
			"description": "Environment variables example"
		}
	}
}
